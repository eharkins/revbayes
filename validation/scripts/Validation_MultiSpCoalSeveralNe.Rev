################################################################################
#
# RevBayes Validation Test: Multispecies coalescent process
#
# Model: Multispecies coalescent with varying effective population sizes across branches.
#        We use the conjugate prior which is more efficient.
#        We test whether we can estimate the population sizes, given fixed species tree and gene trees.
#
#
# authors: Bastien Boussau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Read in an ultrametric tree

primate_tree <- readTrees( "data/primates.tree" )[1]


####################
# Useful variables #
####################

# How many gene trees?
num_loci = 20

# Get some useful variables from the data. We need these later on.
n_species <- primate_tree.ntips()
taxa <- primate_tree.taxa()
n_branches <- 2 * n_species - 1 # number of branches in a rooted tree

moves = VectorMoves()
monitors = VectorMonitors()

###################
# Gene-Tree model #
###################

# We assume independent effective population size parameters for each branch of the species tree.
# We use a conjugate prior for effective population sizes.

mean_Ne ~ dnGamma(shape=1.0,rate=1.0)
moves.append(mvScale(mean_Ne,1,true,2.0) )

print("mean_Ne: ")
print(mean_Ne)

shape <- 3.0
rate := 2.0 * mean_Ne

for (i in 1:num_loci) {
   # The gene tree from the multispecies coalescent process
   # The taxon names in the gene trees are the same as in the species tree
   geneTree[i] ~ dnMultiSpeciesCoalescentInverseGamma(speciesTree=primate_tree, shape=shape, rate=rate, taxa=taxa)
   geneTree[i].clamp(geneTree[i])

}


#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model( primate_tree )

monitors.append(mnScreen(printgen=1, mean_Ne))

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.run(generations=1000)

# you may want to quit RevBayes now
q()

validation = validationAnalysis( mymcmc, 100 )
validation.burnin(generations=500,tuningInterval=25)
validation.run(generations=500)
validation.summarize()
